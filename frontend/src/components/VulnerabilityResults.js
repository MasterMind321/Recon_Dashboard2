import React, { useState } from 'react';

const VulnerabilityResults = () => {
  const [selectedSeverity, setSelectedSeverity] = useState('all');
  const [selectedType, setSelectedType] = useState('all');

  const vulnerabilities = [
    {
      id: 1,
      title: 'SQL Injection in Login Form',
      severity: 'critical',
      type: 'SQLi',
      url: 'https://admin.example.com/login.php',
      parameter: 'username',
      tool: 'sqlmap',
      description: 'Time-based blind SQL injection vulnerability detected in username parameter',
      impact: 'Complete database access, data extraction possible',
      solution: 'Use parameterized queries and input validation',
      discovered: '2025-03-15 14:23:15',
      status: 'new'
    },
    {
      id: 2,
      title: 'Cross-Site Scripting (XSS)',
      severity: 'high',
      type: 'XSS',
      url: 'https://api.example.com/search',
      parameter: 'q',
      tool: 'dalfox',
      description: 'Reflected XSS vulnerability in search functionality',
      impact: 'Session hijacking, credential theft possible',
      solution: 'Implement proper output encoding and CSP headers',
      discovered: '2025-03-15 13:45:22',
      status: 'confirmed'
    },
    {
      id: 3,
      title: 'Open Redirect Vulnerability',
      severity: 'medium',
      type: 'Open Redirect',
      url: 'https://dev.example.com/redirect',
      parameter: 'url',
      tool: 'qsreplace',
      description: 'Open redirect allows malicious redirections',
      impact: 'Phishing attacks, social engineering',
      solution: 'Validate redirect URLs against whitelist',
      discovered: '2025-03-15 12:15:33',
      status: 'investigating'
    },
    {
      id: 4,
      title: 'CRLF Injection',
      severity: 'medium',
      type: 'CRLF',
      url: 'https://staging.example.com/headers',
      parameter: 'custom_header',
      tool: 'crlfuzz',
      description: 'CRLF injection allows HTTP response splitting',
      impact: 'Cache poisoning, session fixation',
      solution: 'Sanitize input and validate header values',
      discovered: '2025-03-15 11:30:45',
      status: 'fixed'
    },
    {
      id: 5,
      title: 'Directory Traversal',
      severity: 'high',
      type: 'Path Traversal',
      url: 'https://test.example.com/files',
      parameter: 'path',
      tool: 'ffuf',
      description: 'Directory traversal vulnerability allows file system access',
      impact: 'Sensitive file disclosure, configuration exposure',
      solution: 'Implement proper path validation and chroot jail',
      discovered: '2025-03-15 10:45:12',
      status: 'new'
    },
    {
      id: 6,
      title: 'Sensitive File Exposure',
      severity: 'critical',
      type: 'Information Disclosure',
      url: 'https://example.com/.env',
      parameter: null,
      tool: 'gau',
      description: 'Environment file with database credentials exposed',
      impact: 'Complete system compromise possible',
      solution: 'Remove sensitive files from web root',
      discovered: '2025-03-15 09:20:33',
      status: 'confirmed'
    }
  ];

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return 'text-red-400 bg-red-400/10 border-red-400/20';
      case 'high': return 'text-orange-400 bg-orange-400/10 border-orange-400/20';
      case 'medium': return 'text-yellow-400 bg-yellow-400/10 border-yellow-400/20';
      case 'low': return 'text-green-400 bg-green-400/10 border-green-400/20';
      default: return 'text-gray-400 bg-gray-400/10 border-gray-400/20';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'new': return 'text-red-400 bg-red-400/10';
      case 'confirmed': return 'text-orange-400 bg-orange-400/10';
      case 'investigating': return 'text-yellow-400 bg-yellow-400/10';
      case 'fixed': return 'text-green-400 bg-green-400/10';
      default: return 'text-gray-400 bg-gray-400/10';
    }
  };

  const getSeverityIcon = (severity) => {
    switch (severity) {
      case 'critical': return 'fas fa-exclamation-triangle';
      case 'high': return 'fas fa-exclamation-circle';
      case 'medium': return 'fas fa-exclamation';
      case 'low': return 'fas fa-info-circle';
      default: return 'fas fa-question-circle';
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const severityMatch = selectedSeverity === 'all' || vuln.severity === selectedSeverity;
    const typeMatch = selectedType === 'all' || vuln.type === selectedType;
    return severityMatch && typeMatch;
  });

  const severityStats = {
    critical: vulnerabilities.filter(v => v.severity === 'critical').length,
    high: vulnerabilities.filter(v => v.severity === 'high').length,
    medium: vulnerabilities.filter(v => v.severity === 'medium').length,
    low: vulnerabilities.filter(v => v.severity === 'low').length
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-white mb-2">Vulnerability Assessment</h1>
          <p className="text-gray-400">Critical security findings and recommendations</p>
        </div>
        <div className="flex items-center space-x-4">
          <button className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg flex items-center">
            <i className="fas fa-bug mr-2"></i>
            Report Vulnerability
          </button>
          <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center">
            <i className="fas fa-file-pdf mr-2"></i>
            Export Report
          </button>
        </div>
      </div>

      {/* Severity Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-red-900/20 border border-red-500/30 p-6 rounded-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-red-400 text-sm font-medium">Critical</p>
              <p className="text-3xl font-bold text-red-400">{severityStats.critical}</p>
            </div>
            <i className="fas fa-exclamation-triangle text-2xl text-red-400"></i>
          </div>
        </div>
        
        <div className="bg-orange-900/20 border border-orange-500/30 p-6 rounded-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-orange-400 text-sm font-medium">High</p>
              <p className="text-3xl font-bold text-orange-400">{severityStats.high}</p>
            </div>
            <i className="fas fa-exclamation-circle text-2xl text-orange-400"></i>
          </div>
        </div>
        
        <div className="bg-yellow-900/20 border border-yellow-500/30 p-6 rounded-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-yellow-400 text-sm font-medium">Medium</p>
              <p className="text-3xl font-bold text-yellow-400">{severityStats.medium}</p>
            </div>
            <i className="fas fa-exclamation text-2xl text-yellow-400"></i>
          </div>
        </div>
        
        <div className="bg-green-900/20 border border-green-500/30 p-6 rounded-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-400 text-sm font-medium">Low</p>
              <p className="text-3xl font-bold text-green-400">{severityStats.low}</p>
            </div>
            <i className="fas fa-info-circle text-2xl text-green-400"></i>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-gray-800 rounded-lg border border-gray-700 p-4">
        <div className="flex items-center space-x-4">
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-1">Severity</label>
            <select
              value={selectedSeverity}
              onChange={(e) => setSelectedSeverity(e.target.value)}
              className="px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-cyan-400"
            >
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-1">Type</label>
            <select
              value={selectedType}
              onChange={(e) => setSelectedType(e.target.value)}
              className="px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-cyan-400"
            >
              <option value="all">All Types</option>
              <option value="SQLi">SQL Injection</option>
              <option value="XSS">Cross-Site Scripting</option>
              <option value="CRLF">CRLF Injection</option>
              <option value="Open Redirect">Open Redirect</option>
              <option value="Path Traversal">Path Traversal</option>
              <option value="Information Disclosure">Information Disclosure</option>
            </select>
          </div>
        </div>
      </div>

      {/* Vulnerabilities List */}
      <div className="space-y-4">
        {filteredVulnerabilities.map((vuln) => (
          <div key={vuln.id} className={`border rounded-lg p-6 ${getSeverityColor(vuln.severity)}`}>
            {/* Vulnerability Header */}
            <div className="flex items-start justify-between mb-4">
              <div className="flex items-start">
                <i className={`${getSeverityIcon(vuln.severity)} text-xl mr-3 mt-1`}></i>
                <div>
                  <h3 className="text-xl font-semibold text-white mb-1">{vuln.title}</h3>
                  <div className="flex items-center space-x-4 text-sm">
                    <span className="text-gray-300">Found by: {vuln.tool}</span>
                    <span className="text-gray-300">•</span>
                    <span className="text-gray-300">{vuln.discovered}</span>
                  </div>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(vuln.status)}`}>
                  {vuln.status}
                </span>
                <span className="px-3 py-1 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
                  {vuln.type}
                </span>
              </div>
            </div>

            {/* URL and Parameter */}
            <div className="bg-gray-900/50 rounded-lg p-4 mb-4">
              <div className="flex items-center text-sm font-mono">
                <i className="fas fa-link mr-2 text-cyan-400"></i>
                <span className="text-cyan-400">{vuln.url}</span>
                {vuln.parameter && (
                  <>
                    <span className="text-gray-400 mx-2">•</span>
                    <span className="text-yellow-400">Parameter: {vuln.parameter}</span>
                  </>
                )}
              </div>
            </div>

            {/* Description and Impact */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <h4 className="text-sm font-semibold text-gray-300 mb-2">Description</h4>
                <p className="text-sm text-gray-400">{vuln.description}</p>
              </div>
              <div>
                <h4 className="text-sm font-semibold text-gray-300 mb-2">Impact</h4>
                <p className="text-sm text-gray-400">{vuln.impact}</p>
              </div>
            </div>

            {/* Solution */}
            <div className="bg-green-900/20 border border-green-500/30 rounded-lg p-4">
              <h4 className="text-sm font-semibold text-green-400 mb-2 flex items-center">
                <i className="fas fa-tools mr-2"></i>
                Recommended Solution
              </h4>
              <p className="text-sm text-green-300">{vuln.solution}</p>
            </div>
          </div>
        ))}
      </div>

      {/* Empty State */}
      {filteredVulnerabilities.length === 0 && (
        <div className="text-center py-12">
          <img 
            src="https://images.unsplash.com/photo-1624969862644-791f3dc98927" 
            alt="Security Assessment" 
            className="w-32 h-32 mx-auto opacity-50 rounded-lg mb-4"
          />
          <h3 className="text-xl font-semibold text-white mb-2">No Vulnerabilities Found</h3>
          <p className="text-gray-400">No vulnerabilities match your current filters.</p>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityResults;